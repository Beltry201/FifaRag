#!/usr/bin/env swift
import Foundation
import NaturalLanguage

// ============================================================================
// GENERADOR DE VECTORES PRE-COMPUTADOS PARA RAG
// Ejecutar ANTES de compilar la app para generar vectores
// ============================================================================

class VectorPreprocessor {
    private let embedding: NLEmbedding?
    
    init() {
        self.embedding = NLEmbedding.sentenceEmbedding(for: .english)
    }
    
    // Generar archivo de vectores pre-calculados
    func generateVectorBundle(
        documents: [String],
        outputPath: String
    ) throws {
        guard let embedding = embedding else {
            throw RAGError.embeddingNotAvailable
        }
        
        print("üîÑ Pre-procesando \(documents.count) documentos...")
        
        var vectorDocs: [PrecomputedVector] = []
        
        for (index, doc) in documents.enumerated() {
            guard let vector = embedding.vector(for: doc) else {
                print("‚ö†Ô∏è No se pudo vectorizar documento \(index)")
                continue
            }
            
            let vectorDoc = PrecomputedVector(
                id: UUID().uuidString,
                content: doc,
                embedding: vector.map { Float($0) }
            )
            
            vectorDocs.append(vectorDoc)
            print("‚úÖ [\(index + 1)/\(documents.count)] Procesado")
        }
        
        // Serializar a JSON
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted
        let data = try encoder.encode(vectorDocs)
        
        // Guardar archivo
        let url = URL(fileURLWithPath: outputPath)
        try data.write(to: url)
        
        print("üíæ Guardado en: \(outputPath)")
        print("üìä Total vectores: \(vectorDocs.count)")
        print("üì¶ Tama√±o: \(Double(data.count) / 1024.0 / 1024.0) MB")
    }
}

// Modelo para vectores pre-computados
struct PrecomputedVector: Codable {
    let id: String
    let content: String
    let embedding: [Float]
}

// Errores del sistema
enum RAGError: LocalizedError {
    case embeddingNotAvailable
    case vectorizationFailed
    case bundleFileNotFound
    
    var errorDescription: String? {
        switch self {
        case .embeddingNotAvailable:
            return "NLEmbedding no disponible"
        case .vectorizationFailed:
            return "Fallo al vectorizar query"
        case .bundleFileNotFound:
            return "Archivo de vectores no encontrado en el bundle"
        }
    }
}

// ============================================================================
// DOCUMENTOS PARA EL RAG - PERSONALIZA AQU√ç
// ============================================================================

let documents = [
    // Informaci√≥n de la empresa
    "Nuestra empresa fue fundada en 2020 en Monterrey, Nuevo Le√≥n, M√©xico.",
    "Ofrecemos servicios de desarrollo iOS con Swift y SwiftUI.",
    "Ofrecemos servicios de desarrollo Android con Kotlin y Jetpack Compose.",
    "Horario de atenci√≥n: Lunes a Viernes de 9:00 AM a 6:00 PM CST.",
    "Contamos con un equipo de 15 desarrolladores senior especializados.",
    "Usamos metodolog√≠as √°giles con sprints de 2 semanas.",
    "Los proyectos t√≠picamente tardan entre 3 a 6 meses.",
    "Implementamos MVVM y Clean Architecture en nuestros proyectos.",
    "Ofrecemos planes de mantenimiento mensual con actualizaciones y fixes.",
    "Precios: apps b√°sicas desde $50,000 MXN, intermedias $150,000 MXN.",
    
    // Informaci√≥n sobre TuristAgent
    "TuristAgent es una aplicaci√≥n m√≥vil para turistas que visitan M√©xico.",
    "La app incluye un esc√°ner de c√≥digos QR para obtener informaci√≥n sobre lugares tur√≠sticos.",
    "TuristAgent proporciona gu√≠as tur√≠sticas interactivas y recomendaciones personalizadas.",
    "La aplicaci√≥n funciona offline para √°reas con poca conectividad.",
    "Incluye mapas detallados de las principales ciudades tur√≠sticas de M√©xico.",
    "TuristAgent ofrece traducciones autom√°ticas a m√∫ltiples idiomas.",
    "La app cuenta con un sistema de recomendaciones basado en preferencias del usuario.",
    "Incluye informaci√≥n sobre eventos culturales y festivales locales.",
    "TuristAgent proporciona informaci√≥n sobre transporte p√∫blico y rutas tur√≠sticas.",
    "La aplicaci√≥n incluye rese√±as y calificaciones de otros turistas.",
    
    // Informaci√≥n t√©cnica
    "La aplicaci√≥n est√° desarrollada en Swift para iOS y SwiftUI para la interfaz.",
    "Utiliza Core ML para procesamiento de im√°genes y reconocimiento de c√≥digos QR.",
    "Implementa MapKit para funcionalidad de mapas y geolocalizaci√≥n.",
    "Usa UserDefaults para almacenamiento local de preferencias del usuario.",
    "La app est√° optimizada para iOS 15.0 y versiones superiores.",
    "Implementa un sistema de cach√© para contenido offline.",
    "Utiliza Combine framework para manejo reactivo de datos.",
    "La arquitectura sigue el patr√≥n MVVM con separaci√≥n clara de responsabilidades.",
    "Implementa tests unitarios y de integraci√≥n para garantizar calidad.",
    "La app est√° disponible en App Store con calificaci√≥n 4.8 estrellas.",
]

// ============================================================================
// EJECUCI√ìN PRINCIPAL
// ============================================================================

print("===========================================")
print("üîß GENERADOR DE VECTORES PRE-COMPUTADOS")
print("===========================================\n")

let preprocessor = VectorPreprocessor()

do {
    try preprocessor.generateVectorBundle(
        documents: documents,
        outputPath: "./precomputed_vectors.json"
    )
    
    print("\n‚úÖ COMPLETADO")
    print("üìù Ahora agrega 'precomputed_vectors.json' a tu proyecto Xcode")
    print("üìã Instrucciones:")
    print("   1. Arrastra precomputed_vectors.json a tu proyecto Xcode")
    print("   2. Aseg√∫rate que est√© en 'Target Membership'")
    print("   3. Verifica en Build Phases > Copy Bundle Resources")
    
} catch {
    print("‚ùå Error: \(error)")
    exit(1)
}